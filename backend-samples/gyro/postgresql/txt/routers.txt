from app.api import crud
from app.api.models import ${schema_model}, ${schema_name}
from fastapi import APIRouter, HTTPException, Path
from typing import List
router = APIRouter()

@router.post("/", response_model=${schema_name}, status_code=201)
async def create_schema(payload: ${schema_model}):
    schema_id = await crud.post(payload)

    response_object = {
        # TODO: contents 내용 추가
        "id": schema_id,
        object contets
    }
    return response_object

@router.put("/{id}/", response_model=${schema_name})
async def update_schema(payload: ${schema_model}, id: int = Path(..., gt=0)):
    schema = await crud.get(id)
    if not schema:
        raise HTTPException(status_code=404, detail="not found")
    schema_id = await crud.put(id, payload)
    response_object = {
        # TODO: contents 내용 추가
        "id": schema_id,
        update_content
    }
    return response_object

@router.get("/{id}/", response_model=${schema_name})
async def read_schema(id: int):
    schema = await crud.get(id)
    if not schema:
        raise HTTPException(status_code=404, detail="Not found")
    return schema   

@router.get("/", response_model=List[${schema_name}])
async def real_all_schema():
    return await crud.get_all()

@router.delete("/{id}/", response_model=${schema_name})
async def delete_schema(id: int = Path(..., gt=0)):
    schema = await crud.get(id)
    if not schema:
        raise HTTPException(status_code=404, detail="Not found")
    await crud.delete(id)
    return schema

@router.get("/get_num/{num}/", response_model=List[${schema_name}])
async def read_schema(num: int):
    return await crud.get_num(num)
